{"version":3,"sources":["ItemTypes.js","CardContent.js","CardsDragPreview.js","CardDragLayer.js","Card.js","Container.js","App.js","index.js"],"names":["CardContent","url","className","src","width","height","draggable","CardsDragPreview","cards","slice","map","card","i","key","id","style","zIndex","length","transform","layerStyles","position","pointerEvents","left","top","right","bottom","getItemStyles","currentOffset","display","x","y","filter","CardDragLayer","useDragLayer","monitor","item","getItem","itemType","getItemType","getSourceClientOffset","isDragging","type","ItemTypes","cardsDragStack","renderItem","Card","props","ref","useRef","useDrag","draggedCard","order","selectedCards","find","clearItemSelection","otherCards","concat","splice","findIndex","c","cardsIDs","includes","end","rearrangeCards","collect","drag","preview","useDrop","accept","hover","dragIndex","index","hoverIndex","hoverBoundingRect","current","getBoundingClientRect","midX","newInsertIndex","getClientOffset","setInsertIndex","hovered","isOver","drop","useEffect","getEmptyImage","captureDraggingState","opacity","styleClasses","isSelected","push","insertLineOnLeft","join","onClick","e","onSelectionChange","metaKey","shiftKey","insertLineOnRight","cardReducer","state","action","init_state","lastSelectedIndex","newSelectedCards","newLastSelectedIndex","newCards","insertIndex","Error","getRandomInt","min","max","Math","ceil","floor","random","values","seeds","Array","keys","Container","useReducer","dispatch","handleItemSelection","cmdKey","apply","foundIndex","f","finalList","a","dragItem","dividerIndex","draggedCards","upperHalfRemainingCards","dc","lowerHalfRemainingCards","App","aBackend","prefixes","split","window","DocumentTouch","document","query","matchMedia","matches","console","error","isTouchDevice","TouchBackend","HTML5Backend","backend","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0f6af883.chunk.js","sourcesContent":["export default {\n  CARD: \"card\"\n};\n","import React from \"react\";\n\nconst CardContent = ({ url }) => (\n  <div className=\"card-outer\">\n    <div className=\"card-inner\">\n      <img src={url} width=\"60\" height=\"84\" draggable=\"false\" />\n    </div>\n  </div>\n);\n\nexport default CardContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CardContent from \"./CardContent\";\n\nconst CardsDragPreview = ({ cards }) => {\n  return (\n    <div>\n      {cards.slice(0, 3).map((card, i) => (\n        <div\n          key={card.id}\n          className=\"card card-dragged\"\n          style={{\n            zIndex: cards.length - i,\n            transform: `rotateZ(${-i * 2.5}deg)`\n          }}\n        >\n          <CardContent url={card.url} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nCardsDragPreview.propTypes = {\n  cards: PropTypes.array\n};\n\nexport default CardsDragPreview;\n","import React from \"react\";\nimport { useDragLayer } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport CardsDragPreview from \"./CardsDragPreview\";\n\nconst layerStyles = {\n  position: \"fixed\",\n  pointerEvents: \"none\",\n  zIndex: 100,\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0\n};\n\nconst getItemStyles = (currentOffset) => {\n  if (!currentOffset) {\n    return {\n      display: \"none\"\n    };\n  }\n  const { x, y } = currentOffset;\n  return {\n    transform: `translate(${x}px, ${y}px)`,\n    filter: \"drop-shadow(0 2px 12px rgba(0,0,0,0.45))\"\n  };\n};\n\nexport default function CardDragLayer() {\n  const { itemType, isDragging, item, currentOffset } = useDragLayer(\n    (monitor) => ({\n      item: monitor.getItem(),\n      itemType: monitor.getItemType(),\n      currentOffset: monitor.getSourceClientOffset(),\n      isDragging: monitor.isDragging()\n    })\n  );\n\n  const renderItem = (type, item) => {\n    switch (type) {\n      case ItemTypes.CARD:\n        return <CardsDragPreview cards={item.cardsDragStack} />;\n      default:\n        return null;\n    }\n  };\n  if (!isDragging) {\n    return null;\n  }\n\n  return (\n    <div style={layerStyles}>\n      <div style={getItemStyles(currentOffset)}>\n        {renderItem(itemType, item)}\n      </div>\n    </div>\n  );\n}\n","import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport CardContent from \"./CardContent\";\n\nexport default function Card(props) {\n  const ref = useRef(null);\n\n  const [{ isDragging }, drag, preview] = useDrag({\n    type: ItemTypes.CARD,\n    item: (monitor) => {\n      const { id, order, url } = props;\n      const draggedCard = { id, order, url };\n      let cards;\n      if (props.selectedCards.find((card) => card.id === props.id)) {\n        cards = props.selectedCards;\n      } else {\n        props.clearItemSelection();\n        cards = [draggedCard];\n      }\n      const otherCards = cards.concat();\n      otherCards.splice(\n        cards.findIndex((c) => c.id === props.id),\n        1\n      );\n      const cardsDragStack = [draggedCard, ...otherCards];\n      const cardsIDs = cards.map((c) => c.id);\n      return { cards, cardsDragStack, draggedCard, cardsIDs };\n    },\n    isDragging: (monitor) => {\n      return monitor.getItem().cardsIDs.includes(props.id);\n    },\n    end: (item, monitor) => {\n      props.rearrangeCards(item);\n      props.clearItemSelection();\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [{ hovered }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    // drop: () => ({\n    //               boxType: \"Picture\"\n    //   }),\n    hover: (item, monitor) => {\n      const dragIndex = item.draggedCard.index;\n      const hoverIndex = props.index;\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n\n      // Get horizontal middle\n      const midX =\n        hoverBoundingRect.left +\n        (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n      // Determine mouse position\n      const pointerOffset = monitor.getClientOffset();\n      const newInsertIndex =\n        pointerOffset.x < midX ? hoverIndex : hoverIndex + 1;\n      props.setInsertIndex(dragIndex, hoverIndex, newInsertIndex);\n    },\n    collect: (monitor) => ({\n      hovered: monitor.isOver()\n    })\n  });\n\n  drag(drop(ref));\n\n  const onClick = (e) => {\n    props.onSelectionChange(props.index, e.metaKey, e.shiftKey);\n  };\n\n  useEffect(() => {\n    // This gets called after every render, by default\n    // (the first one, and every one after that)\n\n    // Use empty image as a drag preview so browsers don't draw it\n    // and we can draw whatever we want on the custom drag layer instead.\n    preview(getEmptyImage(), {\n      // IE fallback: specify that we'd rather screenshot the node\n      // when it already knows it's being dragged so we can hide it with CSS.\n      captureDraggingState: true\n    });\n    // If you want to implement componentWillUnmount,\n    // return a function from here, and React will call\n    // it prior to unmounting.\n    // return () => console.log('unmounting...');\n  }, []);\n\n  const { url } = props;\n  const opacity = isDragging ? 0.4 : 1;\n\n  const styleClasses = [];\n\n  // if (isDragging) {\n  //   styleClasses.push('card-wrapper-dragging');\n  // }\n  if (props.isSelected) {\n    styleClasses.push(\"card-wrapper-selected\");\n  }\n\n  return (\n    <div key={\"card-div-\" + props.id} style={{ position: \"relative\" }}>\n      {props.insertLineOnLeft && hovered && (\n        <div className=\"insert-line-left\" />\n      )}\n      <div className={\"card-wrapper \" + styleClasses.join(\" \")}>\n        <div ref={ref} className=\"card\" onClick={onClick} style={{ opacity }}>\n          <CardContent url={url} />\n        </div>\n      </div>\n      {props.insertLineOnRight && hovered && (\n        <div className=\"insert-line-right\" />\n      )}\n    </div>\n  );\n}\n\nCard.propTypes = {\n  selectedCards: PropTypes.array.isRequired,\n  clearItemSelection: PropTypes.func.isRequired,\n  rearrangeCards: PropTypes.func.isRequired,\n  setInsertIndex: PropTypes.func.isRequired,\n  onSelectionChange: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  index: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired,\n  insertLineOnLeft: PropTypes.bool.isRequired,\n  insertLineOnRight: PropTypes.bool.isRequired,\n  isSelected: PropTypes.bool.isRequired\n};\n","import React, { useReducer } from \"react\";\nimport CardDragLayer from \"./CardDragLayer\";\nimport Card from \"./Card\";\n\nconst TOTAL_ITEMS = 50;\n\nconst cardReducer = (state, action) => {\n  switch (action.type) {\n    case \"CLEAR_SELECTION\":\n      return {\n        ...state,\n        selectedCards: init_state.selectedCards,\n        lastSelectedIndex: init_state.lastSelectedIndex\n      };\n    case \"UPDATE_SELECTION\":\n      return {\n        ...state,\n        selectedCards: action.newSelectedCards,\n        lastSelectedIndex: action.newLastSelectedIndex\n      };\n    case \"REARRANGE_CARDS\":\n      return { ...state, cards: action.newCards };\n    case \"SET_INSERTINDEX\":\n      return {\n        ...state,\n        dragIndex: action.dragIndex,\n        hoverIndex: action.hoverIndex,\n        insertIndex: action.insertIndex\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); \n  //The maximum is exclusive and the minimum is inclusive\n}\n\nconst values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'X']\nconst seeds = ['C', 'D', 'H', 'S']\n\n// url: \"https://picsum.photos/60/84?random&\" + i\nconst init_cards = [...Array(TOTAL_ITEMS).keys()].map( (i) =>  ( {\n    id: i + 1,\n    order: i,\n    url: \"/card-dnd/resources/\" \n      + values[getRandomInt(0, values.length)] \n      + seeds[getRandomInt(0, seeds.length)] \n      + \".svg\"\n   } ));\n\nconst init_state = {\n  cards: init_cards,\n  selectedCards: [],\n  lastSelectedIndex: -1,\n  dragIndex: -1,\n  hoverIndex: -1,\n  insertIndex: -1,\n  isDragging: false\n};\n\nexport default function Container() {\n  const [state, dispatch] = useReducer(cardReducer, init_state);\n\n  const clearItemSelection = () => {\n    dispatch({ type: \"CLEAR_SELECTION\" });\n  };\n\n  const handleItemSelection = (index, cmdKey, shiftKey) => {\n    let newSelectedCards;\n    const cards = state.cards;\n    const card = index < 0 ? \"\" : cards[index];\n    const newLastSelectedIndex = index;\n\n    if (!cmdKey && !shiftKey) {\n      newSelectedCards = [card];\n    } else if (shiftKey) {\n      if (state.lastSelectedIndex >= index) {\n        newSelectedCards = [].concat.apply(\n          state.selectedCards,\n          cards.slice(index, state.lastSelectedIndex)\n        );\n      } else {\n        newSelectedCards = [].concat.apply(\n          state.selectedCards,\n          cards.slice(state.lastSelectedIndex + 1, index + 1)\n        );\n      }\n    } else if (cmdKey) {\n      const foundIndex = state.selectedCards.findIndex((f) => f === card);\n      // If found remove it to unselect it.\n      if (foundIndex >= 0) {\n        newSelectedCards = [\n          ...state.selectedCards.slice(0, foundIndex),\n          ...state.selectedCards.slice(foundIndex + 1)\n        ];\n      } else {\n        newSelectedCards = [...state.selectedCards, card];\n      }\n    }\n    const finalList = cards\n      ? cards.filter((f) => newSelectedCards.find((a) => a === f))\n      : [];\n    dispatch({\n      type: \"UPDATE_SELECTION\",\n      newSelectedCards: finalList,\n      newLastSelectedIndex: newLastSelectedIndex\n    });\n  };\n\n  const rearrangeCards = (dragItem) => {\n    let cards = state.cards.slice();\n    const draggedCards = dragItem.cards;\n\n    let dividerIndex;\n    if ((state.insertIndex >= 0) & (state.insertIndex < cards.length)) {\n      dividerIndex = state.insertIndex;\n    } else {\n      // If missing insert index, put the dragged cards to the end of the queue\n      dividerIndex = cards.length;\n    }\n    const upperHalfRemainingCards = cards\n      .slice(0, dividerIndex)\n      .filter((c) => !draggedCards.find((dc) => dc.id === c.id));\n    const lowerHalfRemainingCards = cards\n      .slice(dividerIndex)\n      .filter((c) => !draggedCards.find((dc) => dc.id === c.id));\n    const newCards = [\n      ...upperHalfRemainingCards,\n      ...draggedCards,\n      ...lowerHalfRemainingCards\n    ];\n    dispatch({ type: \"REARRANGE_CARDS\", newCards: newCards });\n  };\n\n  const setInsertIndex = (dragIndex, hoverIndex, newInsertIndex) => {\n    if (\n      state.dragIndex === dragIndex &&\n      state.hoverIndex === hoverIndex &&\n      state.insertIndex === newInsertIndex\n    ) {\n      return;\n    }\n    dispatch({\n      type: \"SET_INSERTINDEX\",\n      dragIndex: dragIndex,\n      hoverIndex: hoverIndex,\n      insertIndex: newInsertIndex\n    });\n  };\n\n  return (\n    <main>\n      <CardDragLayer />\n      <div className=\"container\">\n        {state.cards.map((card, i) => {\n          const insertLineOnLeft =\n            state.hoverIndex === i && state.insertIndex === i;\n          const insertLineOnRight =\n            state.hoverIndex === i && state.insertIndex === i + 1;\n          return (\n            <Card\n              key={\"card-\" + card.id}\n              id={card.id}\n              index={i}\n              order={card.order}\n              url={card.url}\n              selectedCards={state.selectedCards}\n              rearrangeCards={rearrangeCards}\n              setInsertIndex={setInsertIndex}\n              onSelectionChange={handleItemSelection}\n              clearItemSelection={clearItemSelection}\n              isSelected={state.selectedCards.includes(card)}\n              insertLineOnLeft={insertLineOnLeft}\n              insertLineOnRight={insertLineOnRight}\n            />\n          );\n        })}\n      </div>\n    </main>\n  );\n}\n","import React from \"react\"\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { TouchBackend } from 'react-dnd-touch-backend'\nimport Container from \"./Container.js\"\nimport \"./styles.css\"\n\nexport default function App() {\n  const aBackend = isTouchDevice() ? TouchBackend : HTML5Backend\n\n  return (\n    <div className=\"App\">\n        <h2>Drag and drop multiple items with React DnD</h2>\n        <h4>Use Shift or Cmd key to multi-select</h4>\n      <DndProvider backend={aBackend}>\n        <Container />\n      </DndProvider>\n    </div>\n  )\n}\n\nfunction isTouchDevice() {\n  try {\n    let prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n\n    let mq = function (query) {\n      return window.matchMedia(query).matches;\n    };\n\n    if (('ontouchstart' in window) || (typeof window.DocumentTouch !== \"undefined\" && document instanceof window.DocumentTouch)) {\n      return true;\n    }\n\n    return mq(['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join(''));\n  } catch (e) {\n    console.error('(Touch detect failed)', e);\n    return false;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}